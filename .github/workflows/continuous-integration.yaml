name: Continuous Integration

on: [push]

jobs:
  build_web:
    runs-on: ubuntu-latest
    outputs:
      web_hash: ${{ steps.web_hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: csca5028finalprojectacr.azurecr.io
          username: ${{ secrets.AZURE_ACR_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_ACR_REGISTRY_PASSWORD }}
      - name: Compute hash of web directory
        id: web_hash
        run: |
          HASH=$(find web -type f -exec sha1sum {} \; | sort | sha1sum | awk '{print $1}')
          echo "hash=$HASH" >> $GITHUB_OUTPUT
      - name: Check if image exists in ACR
        id: image_exists
        run: |
          if az acr repository show-tags --name csca5028finalprojectacr --repository web --query "contains(@, '${{ steps.web_hash.outputs.hash }}')" | grep true; then
          echo "exists=true" >> $GITHUB_OUTPUT
            else
          echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      - name: Build Docker image
        if: steps.image_exists.outputs.exists == 'false'
        run: docker build -t web -f web/Dockerfile web
      - name: Check style with flake8
        if: steps.image_exists.outputs.exists == 'false'
        run: docker run --rm web poetry run flake8 web
      - name: Check types with mypy
        if: steps.image_exists.outputs.exists == 'false'
        run: docker run --rm web poetry run mypy web
      - name: Lint files with pylint
        if: steps.image_exists.outputs.exists == 'false'

        run: docker run --rm web poetry run pylint web
      - name: Run web tests in Docker
        if: steps.image_exists.outputs.exists == 'false'
        run: docker run --rm web poetry run pytest
      - name: Build and push image to Azure Container Registry
        if: steps.image_exists.outputs.exists == 'false'
        run: |
          HASH=${{ steps.web_hash.outputs.hash }}
          docker build -f web/Dockerfile web -t csca5028finalprojectacr.azurecr.io/web:${HASH}
          docker push csca5028finalprojectacr.azurecr.io/web:${HASH}

  deploy_infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_web
    defaults:
      run:
        working-directory: infrastructure

    env:
      TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_web_image_tag: ${{ needs.build_web.outputs.web_hash }}

    steps:
      - uses: actions/checkout@v4
      - name: Azure Login action
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
            terraform_version: 1.12.2
      - name: Initialize Terraform
        run: terraform init
      - name: Validate Terraform configuration
        run: terraform validate
      - name: Apply Terraform deployment
        run: terraform apply -auto-approve
